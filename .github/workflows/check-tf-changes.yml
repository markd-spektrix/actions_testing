name: Check If TF Changes
run-name: Checking TF Changes
on: pull_request
jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
        pull-requests: write

    steps:
      - uses: actions/checkout@v3
      
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
      
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      
      - name: Approve Pull Request
        uses: "actions/github-script@v6"
        if: ${{ contains( steps.plan.outputs.stdout , 'No changes. Your infrastructure matches the configuration.') }}

        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                const pullRequest = context.payload.pull_request
                const repository = context.repo

                await github.rest.pulls.createReview({
                    event: "APPROVE",
                    owner: repository.owner,
                    repo: repository.repo,
                    pull_number: pullRequest.number,
                })

      - name: Merge pull request
        uses: "actions/github-script@v6"
        if: ${{ contains( steps.plan.outputs.stdout , 'No changes. Your infrastructure matches the configuration.') }}

        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                const pullRequest = context.payload.pull_request
                const repository = context.repo

                await github.rest.pulls.merge({
                    merge_method: "squash",
                    owner: repository.owner,
                    pull_number: pullRequest.number,
                    repo: repository.repo,
                })
            
    #   - name: Check TF Changes
    #     if: github.event_name == 'pull_request'
    #     id: change_check        
    #     shell: pwsh
    #     env:
    #       PLAN: ${{ steps.plan.outputs.stdout }}
    #     run: |
    #         if ( $env:PLAN.Contains("No changes. Your infrastructure matches the configuration.")) {
    #             echo "No Changes Planned -- Auto merge & Deploy"
    #         }
    #         else {
    #             echo "Changes planned -- Check it!"
    #         }
    #   - name: View context attributes
    #     uses: actions/github-script@v6
    #     with:
    #         script: console.log(context)